plugins {
    id "com.github.johnrengelman.shadow"
}

def generatedResources = file("src/generated")

architectury {
    platformSetupLoomIde()
    neoForge()
}

sourceSets {
    main {
        resources {
            srcDirs += project(":neoforge").file("src/generated").absolutePath
            exclude '.cache'
        }
    }
}


loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    neoForge {
        runs {
            data {
                data()
                programArgs "--all", "--mod", "stellaris"
                programArgs "--output", generatedResources.absolutePath
            }
        }
    }
}


configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-neoforge:${rootProject.rei_version}"
    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${rootProject.rei_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle project(path: ":common", configuration: "transformProductionNeoForge")

    if (System.getenv("CI") != null) {
        modLocalRuntime "com.github.jab125.architectury-data-generation-fix:architectury-data-generation-fix-neoforge:21.0.0"
    }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}